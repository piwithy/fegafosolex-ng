  function dataIsland_IsSupported() { var stringversion=navigator.appVersion; var MSIEpos=stringversion.indexOf('MSIE'); if (MSIEpos == -1) {    return false; }  MSIEpos+=4; var IEVersion=parseFloat(stringversion.substring(MSIEpos)); if (IEVersion < 10) {  return true; } else  return false; }  function afterupdate_IsSupported() { var stringversion=navigator.appVersion; var MSIEpos=stringversion.indexOf('MSIE'); if (MSIEpos == -1) {    return false; }  MSIEpos+=4; var IEVersion=parseFloat(stringversion.substring(MSIEpos)); if (IEVersion < 9) {  return true; } else  return false; }   function dataIsland_get(islandNameWithoutSharp) { var IslandHTMLElement = document.getElementById(islandNameWithoutSharp); var Island = null; if (dataIsland_IsSupported()) Island = IslandHTMLElement.documentElement; else Island = IslandHTMLElement.JSObject; if (Island==null) alert("ERROR: Island #" + islandNameWithoutSharp + " not found !"); return Island; }  function dataIsland_createInHtml(htmlBody, islandName) {  var newIsland = document.createElement("xml");  htmlBody.appendChild(newIsland);  newIsland.setAttribute("id", islandName);  newIsland.JSObject = null; } function dataIsland_updateIslandFromExternalDocument(islandNode, theDoc) {  if (dataIsland_IsSupported())  islandNode.documentElement = theDoc.documentElement;  else  {  islandNode.JSObject = theDoc.documentElement.cloneNode(true);  } } function dataIsland_updateExternalNodeFromIsland(islandNode, theExternalNode) {  if (dataIsland_IsSupported())  {  islandNode = islandNode.documentElement;  var parentNode = theExternalNode.parentNode;  var newNode = islandNode.cloneNode(true);  parentNode.replaceChild(newNode, theExternalNode);  }  else  {  theExternalNode.parentNode.replaceChild(islandNode.JSObject.cloneNode(true), theExternalNode);  } }   function dataIsland_start(rootElement, HTMLElementUpdateHandler) {    if (HTMLElementUpdateHandler)   {  var dataSrc = null;  try  {  dataSrc = rootElement.getAttribute("datasrc");  }  catch (e)  {    }    if (dataSrc)   {  if (afterupdate_IsSupported())  {   compatibleAttachEvent(rootElement,"afterupdate",HTMLElementUpdateHandler);   }  else  {   if (rootElement.getAttribute("disabled") != null)  {     alert("WARNING, 'disabled' attribute has been set on HTMLElement. Data Island won't work on "+ncNodeDump(rootElement));  }  if (!dataIsland_IsSupported())  compatibleAttachEvent(rootElement, 'change', dataIsland_private_OnChangeHTMLElement);  compatibleAttachEvent(rootElement,"change",HTMLElementUpdateHandler);   }  }  }   if (!dataIsland_IsSupported())  dataIsland_updateElementFromIsland(rootElement, false, null);     for(var i = 0; i < rootElement.childNodes.length; i++)  {  var child = rootElement.childNodes[i];  if (child.nodeType != 1) continue;  dataIsland_start(child, HTMLElementUpdateHandler);  }  }     function dataIsland_private_updateAllHtmlElementsOnOtherChange(rootElement, condElement) {  dataIsland_updateElementFromIsland(rootElement, true, condElement);     for(var i = 0; i < rootElement.childNodes.length; i++)  {  var child = rootElement.childNodes[i];  if (child.nodeType != 1) continue;  dataIsland_private_updateAllHtmlElementsOnOtherChange(child, condElement);  }  }  function dataIsland_updateElementFromIsland(HTMLElement, isCondUpdate, condElement) { var dataSrc = HTMLElement.getAttribute("datasrc");  var dataFld = HTMLElement.getAttribute("datafld"); if (dataSrc && dataFld) { if (isCondUpdate) {  var dataSrc0 = condElement.getAttribute("datasrc"); var dataFld0 = condElement.getAttribute("datafld"); if (!(dataSrc0 && dataFld0)) return; if (dataSrc0 != dataSrc) return; if (dataFld0 != dataFld) return; }  var IdentifierWithoutSharp = dataSrc.substring(1); var Island = dataIsland_get(IdentifierWithoutSharp); if (Island) {  var IslandValue = Island.getAttribute(dataFld); setHTMLElementValue(HTMLElement, IslandValue, 0); } } }  function dataIsland_private_updateValueFromHTMLElement(HTMLElement) { var dataSrc = HTMLElement.getAttribute("datasrc");  var dataFld = HTMLElement.getAttribute("datafld"); if (dataSrc && dataFld) {  var IdentifierWithoutSharp = dataSrc.substring(1); var Island = dataIsland_get(IdentifierWithoutSharp); if (Island) {  var val = getHTMLElementValue(HTMLElement);  Island.setAttribute(dataFld, val); } } }  function dataIsland_private_OnChangeHTMLElement(evt) { var element = compatibleEventGetSrcElement(evt); dataIsland_private_updateValueFromHTMLElement(element); dataIsland_private_updateAllHtmlElementsOnOtherChange(document.body, element); } function ncNodeTag(theNode) {  var result = null;   if (theNode && theNode.nodeName && (theNode.nodeName.indexOf('#') == -1)) result = theNode.nodeName;   else if (theNode && theNode.baseName) result = theNode.baseName;  else if (theNode && theNode.localName) result = theNode.localName;    if (result == "") result = null;  return result; }  function ncNodeDump(DOMNodeSource) {  var result = "";  if (DOMNodeSource == null) result = "";  else if (DOMNodeSource.xml) result = DOMNodeSource.xml;  else   {  var libOk=0;  try  {  var serializer = new XMLSerializer();  result = serializer.serializeToString(DOMNodeSource);  delete serializer;  libOk=1;  }  catch (e)  {  }  if (!libOk)  {  try  {   result = DOMNodeSource.outerHTML;  }  catch (e)  {  alert("NodeDump error, unknown object");  }  }  }  return result; }  function ncCloneDocument(DOMDocSource) { if (DOMDocSource==null) return null;  var docCopy = DOMDocSource.cloneNode(true); if (docCopy) return docCopy;  var liParser = new ncDOMParser(); var doc = liParser.parseBuffer(DOMDump(DOMDocSource)); delete liParser; return doc; }  function ncCreateContextualFragment(obj, code) {    if ((typeof Range !== "undefined") && !Range.prototype.createContextualFragment)  {  Range.prototype.createContextualFragment = function(html)  {  var frag = document.createDocumentFragment(),   div = document.createElement("div");  frag.appendChild(div);  div.outerHTML = html;  return frag;  };  }    return obj.createContextualFragment(code); }  function ncReplaceNodeAttributes(dstNode, srcNode) {    while (dstNode.attributes.length)  {  dstNode.removeAttribute(dstNode.attributes[0].nodeName);  }    for (var a=0; a < srcNode.attributes.length; a++)  {  var att = srcNode.attributes[a];  dstNode.setAttribute(att.nodeName, att.nodeValue);  } } function compatibleGetClientX(evt) { var x = compatibleGetClientXWithoutScrollBar(evt);  if (window.pageXOffset)  {  return x + window.pageXOffset;  }  else if (document.documentElement) { return x + document.documentElement.scrollLeft; } else if (document.body) { return x + document.body.scrollLeft; }  alert("error compatibleGetClientX");  return 0; }  function compatibleGetClientY(evt) { var y = compatibleGetClientYWithoutScrollBar(evt);  if (window.pageYOffset)  {  return y + window.pageYOffset;  }  else if (document.documentElement) { return y + document.documentElement.scrollTop; } else if (document.body) { return y + document.body.scrollTop; }  alert("error compatibleGetClientY");  return 0; }  function compatibleGetClientXWithoutScrollBar(evt) {  if (evt.pageX)  {  return evt.pageX + window.pageXOffset;  }  else if (evt.clientX)  {  if (document.documentElement)  {  return evt.clientX + document.documentElement.scrollLeft;  }  else if (document.body)  {  return evt.clientX + document.body.scrollLeft;  }  }   return 0; }  function compatibleGetClientYWithoutScrollBar(evt) {  if (evt.pageY)  {  return evt.pageY;  }  else if (evt.clientY)  {  return evt.clientY;  }   return 0; }  function compatibleGetEvent(evt) {  return evt || window.event; }  function compatibleEventGetKeyCode(evt) {  return (evt.keyCode) ? (evt.keyCode) : (evt.which); }  function compatibleEventGetSrcElement(evt) {  return (evt.srcElement) ? (evt.srcElement) : (evt.target); }  function compatibleStopBubble(evt, doNotPreventDefault) { if (doNotPreventDefault==null) doNotPreventDefault=true;  if (evt.stopPropagation)   {  evt.stopPropagation(); if (doNotPreventDefault) evt.preventDefault();  }  else  {     evt.cancelBubble = true;  evt.returnValue = false;  } }  function compatibleAttachEvent(el, event, func) {  if (el.addEventListener)   {  el.addEventListener(event, func, false);  }    else   {  el['on'+event] = func;  } }  function compatibleDetachEvent(el, event, func) {  if (el.removeEventListener)   {  el.removeEventListener(event, func, false);  }    else   {  el['on'+event] = null;  } }  function compatibleFireEvent(el, event) {  if (document.createEvent && el.dispatchEvent)  {  var evt = document.createEvent("HTMLEvents");  evt.initEvent(event, true, true);  el.dispatchEvent(evt);  }  else if (document.createEventObject)  {  var evt = document.createEventObject();  el.fireEvent("on"+event, evt);  }  else  {  alert("Unsupported navigator for fire event method");  } }   function compatibleGetErrorDesc(e) {  if (e.description)  return e.description;  if (e.message)  return e.message;  return e; }   function initializeSelectBox(SelectBox) {  SelectBox.options.length=0;  SelectBox.selectedIndex=-1; }   function compatibleAddOption(SelectBox, OptionText, OptionValue) { var elOptNew = document.createElement('option'); elOptNew.value = "__temp__";  try {   SelectBox.add(elOptNew, null);  }  catch(ex)   {   SelectBox.add(elOptNew);  } elOptNew.value = OptionValue; elOptNew.text = OptionText;      dataIsland_updateElementFromIsland(SelectBox, false, false, null, null);  return elOptNew; }   function ncGetOuterHTML(node) {  return ncNodeDump(node); }  function compatibleGetWindowSize()  {  var myWidth = 0, myHeight = 0;  if( typeof( window.innerWidth ) == 'number' )   {   myWidth = window.innerWidth;  myHeight = window.innerHeight;  }   else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) )   {   myWidth = document.documentElement.clientWidth;  myHeight = document.documentElement.clientHeight;  }   else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) )   {   myWidth = document.body.clientWidth;  myHeight = document.body.clientHeight;  }  return [ myWidth, myHeight ]; }  function compatibleGetScrollXY()  { var scrOfX = 0, scrOfY = 0;  if( typeof( window.pageYOffset ) == 'number' )  {   scrOfY = window.pageYOffset;  scrOfX = window.pageXOffset;  }  else if( document.body && ( document.body.scrollLeft || document.body.scrollTop ) )  {   scrOfY = document.body.scrollTop;  scrOfX = document.body.scrollLeft;  }  else if( document.documentElement && ( document.documentElement.scrollLeft || document.documentElement.scrollTop ) )  {   scrOfY = document.documentElement.scrollTop;  scrOfX = document.documentElement.scrollLeft;  }  return [ scrOfX, scrOfY ]; }  function compatibleSetScrollXY(scrOfX, scrOfY) { window.scrollTo(scrOfX, scrOfY); }  function compatibleGetScrollWidthHeight() {  var scrOfX = 0, scrOfY = 0;  if (document.documentElement && document.documentElement.scrollTop!=undefined)   {  scrOfY = document.documentElement.scrollHeight;  scrOfX = document.documentElement.scrollWidth;  }  else if (window.pageYOffset!=undefined)   {  alert("wrong compatibleGetScrollWidthHeight not tested");  scrOfY = window.pageYOffset;  scrOfX = window.pageXOffset;  }  else if (self.pageYOffset!=undefined)   {  alert("wrong compatibleGetScrollWidthHeight not tested");  scrOfY = self.pageYOffset;  scrOfX = self.pageXOffset;  }  else   {  scrOfY = document.body.scrollHeight;  scrOfX = document.body.scrollWidth;  }   return [ scrOfX, scrOfY ]; }  function getObjectPosition(obj)  {  var curleft = 0;  var curtop = 0;  if (obj.offsetParent)   {  do   {  curleft += obj.offsetLeft;  curtop += obj.offsetTop;  } while (obj = obj.offsetParent);  }  return [curleft,curtop]; }  function ncgetSelection ()  { if (document.selection)  return document.selection; if (window.getSelection)  return window.getSelection; if (document.getSelection)  return document.getSelection; alert('ncgetSelection unsupported');  return null; }  function ncgetRange ()  { var sel = ncgetSelection(); if (sel.createRange) return sel.createRange();  if (sel.getRangeAt) return sel.getRangeAt(0);  alert('ncgetRange unsupported');  return null; }  function ncparentContainer(range)  { if (range.parentElement) return range.parentElement();  if (range.commonAncestorContainer) return range.commonAncestorContainer;  alert('ncparentContainer unsupported');  return null; }   function ncReplaceInnerHTML(obj, newcode) {      purge(obj, 1);    obj.innerHTML = newcode; }   function purge(myNode, isFirstNode)  {    var i, l, n;  if (!isFirstNode)  {  var myAttributes = myNode.attributes;  if (myAttributes)   {  for (i = myAttributes.length - 1; i >= 0; i--)   {  n = myAttributes[i].name;  var tp = typeof myNode[n];  if ((tp === 'function') || (tp === 'object'))  {  try { delete myNode[n]; } catch (ex) { };  try { myNode[n] = null; } catch (ex) { };  }  else if (tp === 'string')  {    try { myNode[n] = "about:blank"; } catch (ex) { };  }  }  }  } var myChilds = myNode.childNodes; if (myChilds)  {  for (i = myChilds.length-1; i >= 0; i--)   {  var mySubNode = myNode.childNodes[i];  purge(mySubNode, 0);    myNode.removeChild(mySubNode);  delete mySubNode;  mySubNode=null;  } } }  function setHTMLElementValue(HTMLElement, newValue, propagateChangeCallback) { if (HTMLElement.tagName == "SPAN") HTMLElement.innerHTML = newValue; else if (HTMLElement.tagName == "INPUT")  { if (HTMLElement.getAttribute("type") == "radio") { if (HTMLElement.getAttribute("value")==newValue) HTMLElement.checked=true; else HTMLElement.checked=false; } else if (HTMLElement.getAttribute("type") == "checkbox") { if (HTMLElement.getAttribute("value")==newValue) HTMLElement.checked=true; else HTMLElement.checked=false; } else {  HTMLElement.value = newValue; } } else if (HTMLElement.tagName == "SELECT")  { HTMLElement.value = newValue; } else if (HTMLElement.tagName == "TEXTAREA")  { HTMLElement.value = newValue; } else  alert(HTMLElement.tagName+" is not supported by setHTMLElementValue");  if (propagateChangeCallback==null)  propagateChangeCallback=1; if (propagateChangeCallback==1) { if (dataIsland_IsSupported()) { if (afterupdate_IsSupported()) { compatibleFireEvent(HTMLElement, "afterupdate"); } }  compatibleFireEvent(HTMLElement, "change");  } }  function getHTMLElementValue(HTMLElement) { if (HTMLElement.tagName == "SPAN") val = HTMLElement.innerHTML; else if (HTMLElement.tagName == "INPUT")  { if (HTMLElement.getAttribute("type") == "radio") { if (HTMLElement.checked) val=HTMLElement.getAttribute("value"); } else if (HTMLElement.getAttribute("type") == "checkbox") {  if (HTMLElement.checked)  val = HTMLElement.getAttribute("value");  else   {  if (HTMLElement.getAttribute("value") && (HTMLElement.getAttribute("value")=="1"))  val="0";  else  val=null;  } } else {  val = HTMLElement.value; } } else if (HTMLElement.tagName == "SELECT")  { var selIndex = HTMLElement.selectedIndex; if (selIndex == -1)  val="";  else  val = HTMLElement.options[selIndex].value; } else  alert(HTMLElement.tagName+" is not supported by getHTMLElementValue"); return val; }  function getStyle(oElm, strCssRule) { var strValue = ""; if(document.defaultView && document.defaultView.getComputedStyle) { strValue = document.defaultView.getComputedStyle(oElm, "").getPropertyValue(strCssRule); } else if(oElm.currentStyle) { strCssRule = strCssRule.replace(/\-(\w)/g, function (strMatch, p1){ return p1.toUpperCase(); }); strValue = oElm.currentStyle[strCssRule]; } return strValue; }  function applySameColumnWidth(ObjectWithTRRef, ObjectWithTRApply) { var allTRs = ObjectWithTRRef.getElementsByTagName("TR"); var allTRsOfHeader = ObjectWithTRApply.getElementsByTagName("TR"); if (allTRs.length) { var allTDs = allTRs[0].getElementsByTagName("TD"); var allTDsOfHeader = allTRsOfHeader[0].getElementsByTagName("TD"); if (allTDsOfHeader.length==0) allTDsOfHeader = allTRsOfHeader[0].getElementsByTagName("TH");  if (allTDs.length != allTDsOfHeader.length) { alert("applySameColumnWidth: Not same number of columns !"); return; } for (var a=0; a<allTDs.length; a++) { var obj = allTDs[a]; var liPadLeft = parseInt(getStyle(obj, "padding-left"), 10); var liPadRight = parseInt(getStyle(obj, "padding-right"), 10); var liWidth = obj.clientWidth-liPadLeft-liPadRight; allTDsOfHeader[a].style.width = liWidth+"px"; } } }  function ncDOMParser(crossDomainFeature) { if (crossDomainFeature==true) this.crossDomainFeature=true; else this.crossDomainFeature=false;   this.XmlHttpRequestObj = null;  this.asynchronous = false;  this.parseFile = ncDOMParser_parseFile;  this.parseBuffer = ncDOMParser_parseBuffer;  this.private_RequestCallback = ncDOMParser_private_RequestCallback;  this.private_processRequestResult = ncDOMParser_private_processRequestResult;  this.abort = ncDOMParser_abort; this.destroy = ncDOMParser_destroy;     }  function ncDOMParser_destroy() { if (this.XmlHttpRequestObj) { this.XmlHttpRequestObj.destroy(); delete this.XmlHttpRequestObj; this.XmlHttpRequestObj=null; }  return null; }  function ncDOMParser_parseFile(fileName, asynchronous, asynchronousCallback, POSTVariablesArray, HeadersArray) {  if (asynchronous === undefined) this.asynchronous=false;  else this.asynchronous = asynchronous;  if ((this.asynchronous) && (asynchronousCallback === undefined))  {  alert("ncDOMParse::parseFile ERROR : callback function is not defined, using asynchronous mode");  return null;  } var fileNameStandardized = fileName; fileNameStandardized = fileNameStandardized.replace(/\\/g, "/");  if (this.XmlHttpRequestObj) { this.XmlHttpRequestObj.destroy(); delete this.XmlHttpRequestObj; this.XmlHttpRequestObj=null; }   this.XmlHttpRequestObj = new ncXmlHttpRequest(this.crossDomainFeature);    var thisForFunc = this;  if (this.asynchronous)  this.XmlHttpRequestObj.setOnReadyStateChange(function() { thisForFunc.private_RequestCallback(asynchronousCallback); });    if (HeadersArray)  {  this.XmlHttpRequestObj.addHeadersFromArray(HeadersArray);  }    var params="";  if (POSTVariablesArray)  {  this.XmlHttpRequestObj.open("POST", fileNameStandardized, this.asynchronous);  params = this.XmlHttpRequestObj.makeContentFromPOST(POSTVariablesArray);  }  else  {  this.XmlHttpRequestObj.open("GET", fileNameStandardized, this.asynchronous);  }  try   {  this.XmlHttpRequestObj.send(params);  }   catch(err)  {   this.XmlHttpRequestObj.destroy();  delete this.XmlHttpRequestObj;  this.XmlHttpRequestObj = null;  return null;  }    if (!this.asynchronous)  { if (this.XmlHttpRequestObj.getStatus() >= 400)  {  this.XmlHttpRequestObj.destroy();  delete this.XmlHttpRequestObj; this.XmlHttpRequestObj = null; return null; }    var DOMDocument = this.private_processRequestResult(this.XmlHttpRequestObj); this.XmlHttpRequestObj.destroy(); delete this.XmlHttpRequestObj; this.XmlHttpRequestObj = null;  return DOMDocument;  }  else {  return null;  } }  function ncDOMParser_abort() {  if (this.asynchronous == false)  {  alert("ncDOMParser Trying to use abort() on synchronous DOM Parser");  return;  }  if (this.XmlHttpRequestObj==null)  {  alert("ncDOMParser Abort: No sub request object !");  return;  }  this.XmlHttpRequestObj.abort(); }  function ncDOMParser_private_processRequestResult(xmlHttpRequestObj) {  var xmlBuffer = xmlHttpRequestObj.getResponseText();  return this.parseBuffer(xmlBuffer); }  function ncDOMParser_private_RequestCallback(asynchronousCallback) {  var DOMDocument = null;  if (this.XmlHttpRequestObj.getReadyState() == 4)  {  if (this.XmlHttpRequestObj.getStatus() < 400) {  DOMDocument = this.private_processRequestResult(this.XmlHttpRequestObj); }  asynchronousCallback(DOMDocument); if (this.XmlHttpRequestObj) { this.XmlHttpRequestObj.destroy(); delete this.XmlHttpRequestObj; this.XmlHttpRequestObj=null; }  } }  function ncDOMParser_createDocument()  { var obj = null;    var MSXMLnames = null; var stringversion=navigator.appVersion; var MSIEpos=stringversion.indexOf('MSIE'); if (MSIEpos != -1) {    MSIEpos+=4;  var IEVersion=parseFloat(stringversion.substring(MSIEpos));  if (IEVersion == 10)  {  MSXMLnames = [  "Msxml2.DOMDocument.6.0"  ];  }  else  {  MSXMLnames = [  "Msxml2.DOMDocument.3.0",  "Msxml2.DOMDocument",  "Microsoft.XMLDOM"  ];  }  }  else  {    MSXMLnames = [  "Msxml2.DOMDocument.6.0"  ];  }    for(var i in MSXMLnames)  {  try  {  obj = new ActiveXObject(MSXMLnames[i]);  if (obj)  {  obj.async=false;   return obj;  }  }  catch(e)  {  }  }  if (document.implementation.createDocument) {   obj = document.implementation.createDocument("", "", null);  if (obj)  {  obj.async = false;   return obj;  } }  alert("ncDOMParser ERROR: No DOMDocument object is supported by your internet browser !"); return null; }  function ncDOMParser_parseBuffer(xmlBuffer) {  var DOMDocument = ncDOMParser_createDocument(); try {   DOMDocument.loadXML(xmlBuffer);  return DOMDocument; } catch (e) { } delete DOMDocument;  if (window.DOMParser)   {    var oParser = new DOMParser();  DOMDocument = oParser.parseFromString(xmlBuffer, "text/xml");  oParser=null;  return DOMDocument;  }  alert("ncDOMParser ERROR: No DOMDocument object is supported by your internet browser !"); return null; }  function ncDOMParser_getError(DOMDocument) {  if (DOMDocument == null)  return "Unknown error (1). May be not existing file ?";  if (DOMDocument.parseError && (DOMDocument.parseError.reason != ""))  {    return "XML Error: " + DOMDocument.parseError.reason + "\n" +   "At line " + DOMDocument.parseError.line + ": " +  "Source: " + DOMDocument.parseError.srcText;  }  if (DOMDocument.documentElement == null)  return "Unknown error (2). May be not existing file ?";     var errors = DOMDocument.getElementsByTagName("parsererror");  if (errors.length)  {    var errStr = ncNodeDump(errors[0]);  return errStr;  }  return null; } function ncNotDOMGetter(crossDomainFeature) { if (crossDomainFeature==true) this.crossDomainFeature=true; else this.crossDomainFeature=false;   this.XmlHttpRequestObj = null;  this.asynchronous = false;  this.getFile = ncNotDOMGetter_getFile;  this.private_RequestCallback = ncNotDOMGetter_private_RequestCallback;  this.private_processRequestResult = ncNotDOMGetter_private_processRequestResult;  this.destroy = ncNotDOMGetter_destroy;  this.abort = ncNotDOMGetter_abort;   }  function ncNotDOMGetter_destroy() { if (this.XmlHttpRequestObj) { this.XmlHttpRequestObj.destroy(); delete this.XmlHttpRequestObj; this.XmlHttpRequestObj=null; }  return null; }  function ncNotDOMGetter_getFile(fileName, asynchronous, asynchronousCallback, POSTVariablesArray, HeadersArray) {  if (asynchronous === undefined) this.asynchronous=false;  else this.asynchronous = asynchronous;  if ((this.asynchronous) && (asynchronousCallback === undefined))  {  alert("ncNotDOMGetter::getFile ERROR : callback function is not defined, using asynchronous mode");  return null;  } var fileNameStandardized = fileName; fileNameStandardized = fileNameStandardized.replace(/\\/g, "/");  if (this.XmlHttpRequestObj) { this.XmlHttpRequestObj.destroy(); delete this.XmlHttpRequestObj; this.XmlHttpRequestObj=null; }   this.XmlHttpRequestObj = new ncXmlHttpRequest(this.crossDomainFeature);    var thisForFunc = this;  if (this.asynchronous)  this.XmlHttpRequestObj.setOnReadyStateChange(function() { thisForFunc.private_RequestCallback(asynchronousCallback); });    if (HeadersArray)  {  this.XmlHttpRequestObj.addHeadersFromArray(HeadersArray);  }    var params="";  if (POSTVariablesArray)  {  this.XmlHttpRequestObj.open("POST", fileNameStandardized, this.asynchronous);  params = this.XmlHttpRequestObj.makeContentFromPOST(POSTVariablesArray);  }  else  {  this.XmlHttpRequestObj.open("GET", fileNameStandardized, this.asynchronous);  }  try   {  this.XmlHttpRequestObj.send(params);  }   catch(err)  {   this.XmlHttpRequestObj.destroy();  delete this.XmlHttpRequestObj;  this.XmlHttpRequestObj = null;  return null;  }    if (!this.asynchronous)  { if (this.XmlHttpRequestObj.getStatus() >= 400)  {  this.XmlHttpRequestObj.destroy();  delete this.XmlHttpRequestObj; this.XmlHttpRequestObj = null; return null; }    var result = this.private_processRequestResult(this.XmlHttpRequestObj); this.XmlHttpRequestObj.destroy(); delete this.XmlHttpRequestObj; this.XmlHttpRequestObj = null;  return result;  }  else {  return null;  } }  function ncNotDOMGetter_abort() {  if (this.asynchronous == false)  {  alert("ncNotDOMGetter Trying to use abort() on synchronous DOM Parser");  return;  }  if (this.XmlHttpRequestObj==null)  {  alert("ncNotDOMGetter Abort: No sub request object !");  return;  }  this.XmlHttpRequestObj.abort(); }  function ncNotDOMGetter_private_processRequestResult(xmlHttpRequestObj) { var ret = xmlHttpRequestObj.getResponseText();  return ret; }  function ncNotDOMGetter_private_RequestCallback(asynchronousCallback) {  var result = null;  if (this.XmlHttpRequestObj.getReadyState() == 4)  {  if (this.XmlHttpRequestObj.getStatus() < 400) {  result = this.private_processRequestResult(this.XmlHttpRequestObj); }  asynchronousCallback(result); if (this.XmlHttpRequestObj) { this.XmlHttpRequestObj.destroy(); delete this.XmlHttpRequestObj; this.XmlHttpRequestObj=null; }  } }   function ncXmlHttpRequest(crossDomainFeature) {  this.navigatorXmlHttpRequest = null; if (crossDomainFeature==true) this.crossDomainFeature=true; else this.crossDomainFeature=false;     if (window.XMLHttpRequest) { try { this.navigatorXmlHttpRequest = new XMLHttpRequest(); if (this.crossDomainFeature) { if ("withCredentials" in this.navigatorXmlHttpRequest)  {  } else if (typeof XDomainRequest != "undefined")  {  delete this.navigatorXmlHttpRequest; this.navigatorXmlHttpRequest = new XDomainRequest(); } } } catch(e) { } }   if (this.navigatorXmlHttpRequest == null)  {  var names = [  "Msxml2.XMLHTTP.6.0",  "Msxml2.XMLHTTP.3.0",  "Msxml2.XMLHTTP",  "Microsoft.XMLHTTP"  ];  for(var i in names)  {  try  {  this.navigatorXmlHttpRequest = new ActiveXObject(names[i]);  break;  }  catch(e)  {  }  }  }    if (this.navigatorXmlHttpRequest == null)  alert("ncXmlHttpRequest ERROR: No XmlHttpRequest object is supported by your internet browser !");      this.open = ncXmlHttpRequest_open;  this.send = ncXmlHttpRequest_send;  this.setOnReadyStateChange = ncXmlHttpRequest_setOnReadyStateChange;  this.setRequestHeader = ncXmlHttpRequest_setRequestHeader;  this.getResponseText = ncXmlHttpRequest_getResponseText;  this.getResponseXML = ncXmlHttpRequest_getResponseXML;  this.getReadyState = ncXmlHttpRequest_getReadyState;  this.getStatus = ncXmlHttpRequest_getStatus;  this.getStatusText = ncXmlHttpRequest_getStatusText;    this.makeContentFromPOST = ncXmlHttpRequest_makeContentFromPOST;  this.addHeadersFromArray = ncXmlHttpRequest_addHeadersFromArray; this.destroy = ncXmlHttpRequest_destroy; }  function ncXmlHttpRequest_destroy() { if (this.navigatorXmlHttpRequest) { try { this.navigatorXmlHttpRequest.onreadystatechange = null; } catch(e) { } delete this.navigatorXmlHttpRequest; this.navigatorXmlHttpRequest = null; } return null; }  function ncXmlHttpRequest_open(sMethod, sUrl, bAsync, sUser, sPassword) {  if (this.navigatorXmlHttpRequest) {  this.navigatorXmlHttpRequest.open(sMethod, sUrl, bAsync, sUser, sPassword); if (this.crossDomainFeature) this.navigatorXmlHttpRequest.withCredentials=true; }  else  alert("ncXmlHttpRequest ERROR: OPEN Failed. No XmlHttpRequest object"); }  function ncXmlHttpRequest_send(varBody) {  if (this.navigatorXmlHttpRequest)  this.navigatorXmlHttpRequest.send(varBody);  else  alert("ncXmlHttpRequest ERROR: SEND Failed. No XmlHttpRequest object"); }  function ncXmlHttpRequest_setOnReadyStateChange(fFunction) {  if (this.navigatorXmlHttpRequest)  this.navigatorXmlHttpRequest.onreadystatechange = fFunction;  else  alert("ncXmlHttpRequest ERROR: SETONREADYSTATECHANGE Failed. No XmlHttpRequest object"); }  function ncXmlHttpRequest_setRequestHeader(sName, sValue) {  if (this.navigatorXmlHttpRequest)  this.navigatorXmlHttpRequest.setRequestHeader(sName, sValue);  else  alert("ncXmlHttpRequest ERROR: SETREQUESTHEADER Failed. No XmlHttpRequest object"); }  function ncXmlHttpRequest_getResponseText() {  if (this.navigatorXmlHttpRequest)  return this.navigatorXmlHttpRequest.responseText;  else  return null; }  function ncXmlHttpRequest_getResponseXML()  {  if (this.navigatorXmlHttpRequest)  {  var XMLResponse = this.navigatorXmlHttpRequest.responseXML;  if (XMLResponse && XMLResponse.documentElement)   return XMLResponse;  else  return null;  }  else  return null; }  function ncXmlHttpRequest_getReadyState() {  if (this.navigatorXmlHttpRequest)  return this.navigatorXmlHttpRequest.readyState;  else  return 0; }  function ncXmlHttpRequest_getStatus() {  if (this.navigatorXmlHttpRequest)  return this.navigatorXmlHttpRequest.status;  else  return 501; }  function ncXmlHttpRequest_getStatusText() {  if (this.navigatorXmlHttpRequest)  return this.navigatorXmlHttpRequest.statusText;  else  return "Not Implemented"; }  function ncXmlHttpRequest_makeContentFromPOST(POSTVariablesArray) {  var params = "";  for (var POSTV = 0; POSTV < POSTVariablesArray.length; POSTV++)  {  var n = POSTVariablesArray[POSTV][0];  var c = POSTVariablesArray[POSTV][1];  if (params!= "") params += "&";  params += encodeURIComponent(n)+ "="+encodeURIComponent(c);  }  if (params.length)  {  this.setRequestHeader("Content-type", "application/x-www-form-urlencoded");  this.setRequestHeader("Content-length", params.length);  }  return params; }  function ncXmlHttpRequest_addHeadersFromArray(HeadersArray) {  for (var HV = 0; HV < HeadersArray.length; HV++)  {  var n = HeadersArray[HV][0];  var c = HeadersArray[HV][1];  this.setRequestHeader(n,c);  } } function compatibleTransformNode(node, oXslDom) {  if (node==null) return null;    try  {    var oProcessor = new XSLTProcessor();  oProcessor.importStylesheet(oXslDom);     var oResultDom = oProcessor.transformToDocument(node);  var sResult = ncNodeDump(oResultDom.documentElement);        if (sResult.indexOf("<transformiix:result") > -1) {  sResult = sResult.substring(sResult.indexOf(">") + 1,   sResult.lastIndexOf("<"));  }  delete oProcessor;  return sResult;   }  catch (e)  {    var liResult = "";  try  {  liResult = node.transformNode(oXslDom);  }  catch (e)  {   }  return liResult;  } }  function makeNoNamespaceExpression(expression) {  var arr = expression.split('/');  correctEXPR=""; for (var i=0; i < arr.length; i++) { var elem = arr[i]; if (elem != "") {  var elemNoSelector = elem;  var posSelector = elemNoSelector.indexOf('[');  if (posSelector!=-1)  elemNoSelector = elemNoSelector.substring(0, posSelector); if ((elemNoSelector != ".") && (elemNoSelector != '*') && (elemNoSelector != "..") && (elemNoSelector.indexOf(':')==-1)) { var andPart = ""; if (posSelector!=-1) { var afterSelection = elem.substring(posSelector); elem=elem.substring(0, posSelector); andPart = "and ("+afterSelection.substring(1, afterSelection.length-1)+")"; } correctEXPR += "*[local-name()='"+elem+"'"; if (andPart!="") correctEXPR += andPart; correctEXPR += "]"; } else { correctEXPR += elem; } if (i < arr.length-1) correctEXPR+="/"; } else { correctEXPR += "/"; } }  return correctEXPR; }  function compatibleSelectSingleNode(nodeOrDoc, expression, namespaceProcessing) {  if (nodeOrDoc==null) return null; if (namespaceProcessing==null) namespaceProcessing=0;   var node = (nodeOrDoc.documentElement) ? nodeOrDoc.documentElement : nodeOrDoc;  var doc = node.ownerDocument == null ? node : node.ownerDocument;  var exprUsed = expression; if (!namespaceProcessing) exprUsed = makeNoNamespaceExpression(expression);  try  {   var oEvaluator = new XPathEvaluator();  var oResult = null;  try   {  oResult = oEvaluator.evaluate(exprUsed, node, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);  }  catch (e)  {    delete oEvaluator;  return null;  }   if (oResult.singleNodeValue!=null && oResult.singleNodeValue.documentElement)  {   delete oEvaluator;  return null;  }  else  {   delete oEvaluator;  return oResult.singleNodeValue;   } } catch (e) { }    doc.setProperty("SelectionLanguage", "XPath"); return nodeOrDoc.selectSingleNode(exprUsed); }  function compatibleSelectNodes(nodeOrDoc, expression, namespaceProcessing) {  if (nodeOrDoc==null) return null; if (namespaceProcessing==null) namespaceProcessing=0;   var node = (nodeOrDoc.documentElement) ? nodeOrDoc.documentElement : nodeOrDoc;  var doc = node.ownerDocument == null ? node : node.ownerDocument;   var exprUsed = expression; if (!namespaceProcessing) exprUsed = makeNoNamespaceExpression(expression);  try  {   var oEvaluator = new XPathEvaluator();   var oResult = null;  try   {  oResult = oEvaluator.evaluate(exprUsed, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);   }  catch (e)  {    delete oEvaluator;  return null;  }    var aNodes = new Array;  if (oResult != null)   {  var oElement = oResult.iterateNext();  while(oElement)   {  aNodes.push(oElement);  oElement = oResult.iterateNext();  }  }  delete oEvaluator;  return aNodes;  } catch (e) { }   doc.setProperty("SelectionLanguage", "XPath");  return nodeOrDoc.selectNodes(exprUsed); }