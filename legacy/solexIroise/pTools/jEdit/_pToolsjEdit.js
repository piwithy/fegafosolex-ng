function jAction() {    this.expression = null;  this.actionID = 0;  this.buttonObject = null;      this.parse = jAction_parse;  this.IsEnabledAtPos = jAction_IsEnabledAtPos;  this.Apply = jAction_Apply;  this.removeActionOnThisText = jAction_removeActionOnThisText;  this.removeUselessSequences = jAction_removeUselessSequences;  this.roundSelectionLeft = jAction_roundSelectionLeft;  this.roundSelectionRight = jAction_roundSelectionRight; }  function jAction_parse(actionNode, htmlbuttonzone) {  var actId = actionNode.getAttribute("id");  if (actId==null)  {  alert("jAction::parse Action ID is null");  return 0;  }    this.actionID=actId;    var currentExpression = null;  for (var c=0; c < actionNode.childNodes.length; c++)  {  var child = actionNode.childNodes[c];  if (ncNodeTag(child)==null)  continue;     if (ncNodeTag(child)=="button")  {  this.buttonObject = document.createElement("input");  this.buttonObject.setAttribute("type", "button");  if (child.getAttribute("value")&&child.getAttribute("value")!="") this.buttonObject.setAttribute("value", child.getAttribute("value"));  if (child.getAttribute("className")&&child.getAttribute("className")!="") this.buttonObject.className = child.getAttribute("className");  this.buttonObject.setAttribute("actionid", this.actionID);  htmlbuttonzone.appendChild(this.buttonObject);  }  else if (ncNodeTag(child)=="expression")  {  currentExpression = new jExpression();  currentExpression.parse(child);  }  else  {  alert("jAction::parse Unknown node '"+ncNodeTag(child)+"'");  return;  }  }  this.expression=currentExpression;    return 1; }  function jAction_IsEnabledAtPos(txt, startPos, useLarge) {    var startTk = this.expression.getStartToken();  var endTk = this.expression.getEndToken();    var startPos2 = (useLarge==1) ? this.roundSelectionLeft(txt, startPos) : this.roundSelectionRight(txt, startPos);    var active = false;  for (var i=0; i < Math.min(txt.length, startPos2); i++)  {  var startCompare = txt.substring(i, i+startTk.length);  if (startCompare.toUpperCase() == startTk.toUpperCase())  {  active=true;  }  var stopCompare = txt.substring(i, i+endTk.length);  if (stopCompare.toUpperCase() == endTk.toUpperCase())  {  active=false;  }  }  return active; }  function jAction_roundSelectionLeft(txt, leftpos) {  var insideTag=false;  var recomp = leftpos;  for (var i=leftpos-1; i>0; i--)  {  var car = txt.charAt(i);  if (!insideTag)  {  if (car == ">")  {  insideTag=true;  }  else  break;  }  if (insideTag)  {  if (car == "<")  {  insideTag=false;  }  }  recomp=i;  }  return recomp; }  function jAction_roundSelectionRight(txt, rightpos) {  var insideTag=false;  var recomp = rightpos;  for (var i=rightpos; i>0; i++)  {  recomp=i;  var car = txt.charAt(i);  if (!insideTag)  {  if (car == "<")  {  insideTag=true;  }  else  break;  }  if (insideTag)  {  if (car == ">")  {  insideTag=false;  }  }  }  return recomp; }  function jAction_removeActionOnThisText(txt, startTk, endTk) {  while (1)  {  var tmp = txt.toLowerCase();  var startTagAtPos = tmp.indexOf(startTk.toLowerCase());  if (startTagAtPos==-1)  break;  var endTagAtPos = tmp.indexOf(endTk.toLowerCase());  if (endTagAtPos==-1)  break;  if (startTagAtPos < endTagAtPos)  {  var txtLeft = txt.substring(0, startTagAtPos);  var txtRight = txt.substring(endTagAtPos+endTk.length);  var txtMiddle = txt.substring(startTagAtPos+startTk.length, endTagAtPos);  txt = txtLeft + txtMiddle + txtRight;  }  else  break;  }   return txt; }  function jAction_removeUselessSequences(txt, startTk, endTk) {    var toFind1 = startTk.toLowerCase()+endTk.toLowerCase();  var toFind2 = startTk.toLowerCase()+endTk.toLowerCase();  while (1)  {  var tmp = txt.toLowerCase();  var startAndEndTagAtPos1 = tmp.indexOf(toFind1);  var startAndEndTagAtPos2 = tmp.indexOf(toFind2);    var p = Math.max(startAndEndTagAtPos1,startAndEndTagAtPos2);  if (p!=-1)  {  var txtLeft = txt.substring(0, p);  var txtRight = txt.substring(p+toFind.length);  txt = txtLeft + txtRight;  }  else  break;    }    while (1)  {  var tmp = txt.toLowerCase();  var startTagAtPos = tmp.indexOf(startTk.toLowerCase());  var startTagAtPos2 = (startTagAtPos!=-1)?tmp.indexOf(startTk.toLowerCase(),startTagAtPos+1):-1;  if (startTagAtPos2==-1)  break;    var endTagAtPos = tmp.indexOf(endTk.toLowerCase());  if (endTagAtPos==-1)  break;  if (startTagAtPos2 < endTagAtPos)  {  var txtLeft = txt.substring(0, startTagAtPos2);  var txtRight = txt.substring(endTagAtPos+endTk.length);  var txtMiddle = txt.substring(startTagAtPos2+startTk.length, endTagAtPos);  txt = txtLeft + txtMiddle + txtRight;  }  else  break;  }    return txt; }  function jAction_Apply(txt, startPos, endPos) {  var startTk = this.expression.getStartToken();  var endTk = this.expression.getEndToken();  var resultingText = "";    if (startPos == endPos)  {    var startPos2 = this.roundSelectionLeft(txt, startPos);  var txtLeft = txt.substring(0, startPos2);  var txtRight = txt.substring(endPos2);  resultingText = txtLeft + startTk + "texte" + endTk + txtRight;  return resultingText;  }    var libAddTags = (!this.IsEnabledAtPos(txt, startPos, 0));  var largePosEnabled = this.IsEnabledAtPos(txt, startPos, 1);      var startPos2 = this.roundSelectionLeft(txt, startPos);  var endPos2 = this.roundSelectionRight(txt, endPos);  var txtLeft = txt.substring(0, startPos2);  var txtRight = txt.substring(endPos2);  var txtMiddle = txt.substring(startPos2, endPos2);  var txt2 = this.removeActionOnThisText(txtMiddle, startTk, endTk);  var lenDiff = txtMiddle.length - txt2.length;  endPos2 -= lenDiff;    if (!libAddTags)  {    var allText = txtLeft;    if (largePosEnabled)  {  allText += endTk;  }    var tmp = txt2.toLowerCase();  var posStartTk = tmp.indexOf(startTk.toLowerCase());  var posEndTk = tmp.indexOf(endTk.toLowerCase());  var txt3 = txt2;  if (posEndTk!=-1)  {    txt3 = txt2.substring(0, posEndTk) + txt2.substring(posEndTk+endTk.length);  }  if (posStartTk!=-1)  {    txt3 = txt2.substring(0, posStartTk) + txt2.substring(posStartTk+startTk.length);  }  allText+=txt3;    if ((posStartTk!=-1)||(largePosEnabled && (posEndTk==-1)))  {  allText+= startTk;  }    allText += txtRight;   resultingText = this.removeUselessSequences(allText, startTk, endTk);  }  else  {    resultingText = this.removeUselessSequences(txtLeft + startTk + txt2 + endTk + txtRight, startTk, endTk);  }  return resultingText; } var jEditorStyle = null;  function jEditor(parentObject) {    this.HTMLParentObject = parentObject;  this.configDocument = null;  this.jtext = "";  this.HTMLButtonZone = null;  this.HTMLEditZone = null;  this.HTMLSelInfo = null;  this.targetFormName = null;  this.actions = new Array();    this.start = jEditor_start;  this.parseConfigFile = jEditor_parseConfigFile;  this.parseDOM = jEditor_parseDOM;  this.render = jEditor_render;  this.unrender = jEditor_unrender;  this.onSelect = jEditor_onSelect;  this.onFocus = jEditor_onFocus;  this.onBlur = jEditor_onBlur;  this.subDump = jEditor_subDump;    this.computeSelection = jEditor_computeSelection;   this.onButtonClick = jEditor_onButtonClick;  this.applyActionOnSelectedText = jEditor_applyActionOnSelectedText;    this.currentSelectionStartPos = 0;  this.currentSelectionEndPos = 0; }  function jEditor_start() {    if (this.HTMLParentObject==null)  {  alert("jEditor parentObject is null");  return;  }  this.targetFormName = this.HTMLParentObject.getAttribute("name");  if (this.targetFormName==null)  {  alert("jEditor Missing 'name' on parentObject");  return;  }  this.HTMLParentObject.removeAttribute("name");    this.jtext = this.HTMLParentObject.innerHTML;  ncReplaceInnerHTML(this.HTMLParentObject,"");    this.HTMLButtonZone = document.createElement("div");  this.HTMLParentObject.appendChild(this.HTMLButtonZone);   this.HTMLEditZone = document.createElement("div");  this.HTMLEditZone.contentEditable = true;  this.HTMLEditZone.insertBrOnReturn = false;  this.HTMLParentObject.appendChild(this.HTMLEditZone);    this.HTMLSelInfo = document.createElement("textArea");  this.HTMLParentObject.appendChild(this.HTMLSelInfo);  this.HTMLSelInfo.setAttribute("name", this.targetFormName);  this.HTMLSelInfo.setAttribute("rows", 10);  this.HTMLSelInfo.setAttribute("cols", 40);   if (this.configDocument==null)  this.parseConfigFile(jEditor_Path+"defaultConfig.xml");     this.HTMLEditZone.innerHTML = this.render(this.jtext);      var obj = this;   compatibleAttachEvent(this.HTMLEditZone, "blur", function (ev) { ev = obj.onBlur(ev) });  compatibleAttachEvent(this.HTMLEditZone, "click", function (ev) { obj.computeSelection(); });  compatibleAttachEvent(this.HTMLEditZone, "keyup", function (ev) { obj.computeSelection(); });   compatibleAttachEvent(this.HTMLEditZone.ownerDocument, "mouseup", function (ev) { obj.computeSelection(); });  }  function jEditor_parseConfigFile(xmlFile) {  var ret = 0;  var liParser = new ncDOMParser();  var liDOMDocument = liParser.parseFile(xmlFile);  var errStr = ncDOMParser_getError(liDOMDocument);  if (errStr) alert(errStr);  else  {  ret = this.parseDOM(liDOMDocument);  }  delete liParser;  return ret; }  function jEditor_parseDOM(DOMDoc) {  var rootNode = DOMDoc.documentElement;  if (ncNodeTag(rootNode) != "jEditor")  {  alert("jEditor::parseDOM XML Root node must be 'jEditor'");  return 0;  }  else  {  for (var c=0; c < rootNode.childNodes.length; c++)  {  var child = rootNode.childNodes[c];  if (ncNodeTag(child)==null)  continue;   if (ncNodeTag(child) == "action")  {  var newAction = new jAction();  if (!newAction.parse(child, this.HTMLButtonZone))  {  delete newAction;  return 0;  }  this.actions[this.actions.length] = newAction;   if (newAction.buttonObject)  {  var obj=this;  compatibleAttachEvent(newAction.buttonObject, "click", function (ev) { ev = obj.onButtonClick(ev) });  }  }  else if (ncNodeTag(child) == "buttonZone")  {  this.HTMLButtonZone.className = child.getAttribute("className");  }  else if (ncNodeTag(child) == "editZone")  {  this.HTMLEditZone.className = child.getAttribute("className");  }  else if (ncNodeTag(child) == "style")  {    if (jEditorStyle==null)  {  jEditorStyle = ncNodeDump(child.childNodes[0]);  var nodeCSS = document.createElement("style");  nodeCSS.setAttribute("type", "text/css");  nodeCSS.innerHTML = jEditorStyle;  this.HTMLParentObject.appendChild(nodeCSS);  }  }  else  {  alert("jEditor::parseDOM Unknown node '"+ncNodeTag(child)+"'");  return 0;  }  }  }      this.configDocument = DOMDoc;  return 1; }  function jEditor_render(jtext) {  for (var a=0; a < this.actions.length; a++)  {  var act = this.actions[a];  var expr = act.expression;  var rgxstr = escapeRegEx("["+expr.PTEXT+"]")+"(.*?)"+escapeRegEx("[/"+expr.PTEXT+"]");   var rpl = "<"+expr.EDITORHTML+">$1</"+expr.EDITORHTML+">";  var regex = new RegExp(rgxstr, "g");  jtext = jtext.replace(regex, rpl);  delete regex;  }  return jtext; }  function jEditor_unrender(jhtml) {  for (var a=0; a < this.actions.length; a++)  {  var act = this.actions[a];  var expr = act.expression;  var rgxstr = escapeRegEx("<"+expr.EDITORHTML+">")+"(.*?)"+escapeRegEx("</"+expr.EDITORHTML+">");   var rpl = "["+expr.PTEXT+"]$1[/"+expr.PTEXT+"]";  var regex = new RegExp(rgxstr, "g");  jhtml = jhtml.replace(regex, rpl);  delete regex;  }  return jhtml; }  function jEditor_onSelect(ev) { }  function jEditor_onFocus(ev) { }  function jEditor_onBlur(ev) {   }  function jEditor_onButtonClick(ev) {  this.computeSelection();  ev = compatibleGetEvent(ev);  var srcElement = compatibleEventGetSrcElement(ev);  var actId = srcElement.getAttribute("actionid");     for (var a=0; a < this.actions.length; a++)  {  var act = this.actions[a];  if (act.actionID == actId)  {    this.applyActionOnSelectedText(act);  return;  }  }  alert("No action found linked with that button !"); }  function jEditor_subDump(node, rg) {  var txt="";  var startPos=-1;  var endPos=-1;  var shiftBeforeStartPos = 0;  var shiftBeforeEndPos = 0;  for (var c=0; c < node.childNodes.length; c++)  {  var child = node.childNodes[c];  if (child.nodeType==1)  {    var startTagDump = "<"+ncNodeTag(child)+">";  if (startPos == -1)  {  shiftBeforeStartPos += startTagDump.length;  }  if (endPos == -1)  {  shiftBeforeEndPos += startTagDump.length;  }  txt += startTagDump;      var subArray = this.subDump(child, rg);  if (subArray[1]!=-1)  {  startPos = subArray[1];   startPos += shiftBeforeStartPos;  }  if (subArray[2]!=-1)  {  endPos = subArray[2];  endPos += shiftBeforeEndPos;  }    if (startPos == -1)  {  shiftBeforeStartPos += subArray[0].length;  }  if (endPos == -1)  {  shiftBeforeEndPos += subArray[0].length;  }  txt += subArray[0];     if (ncNodeTag(child)!="BR")  {  var stopTagDump = "</"+ncNodeTag(child)+">";  if (startPos == -1)  {  shiftBeforeStartPos += stopTagDump.length;  }  if (endPos == -1)  {  shiftBeforeEndPos += stopTagDump.length;  }  txt += stopTagDump;  }  }  else  {    var textNodeDump = ncNodeDump(child);  txt += textNodeDump;  if (child == rg.startContainer)  {  startPos = rg.startOffset;  startPos += shiftBeforeStartPos;  }  else if (startPos == -1)  {    shiftBeforeStartPos += textNodeDump.length;  }    if (child == rg.endContainer)  {  endPos = rg.endOffset;  endPos += shiftBeforeEndPos;  }  else if (endPos == -1)  {    shiftBeforeEndPos += textNodeDump.length;  }  }  }    return [txt, startPos, endPos]; }  function jEditor_computeSelection() {    var rg = ncgetRange();  this.HTMLSelInfo.innerHTML="";  var resAr = this.subDump(this.HTMLEditZone, rg);    var innerHTMLModified = this.HTMLEditZone.innerHTML.toLowerCase();  var resArModified = resAr[0].toLowerCase();  if (resArModified != innerHTMLModified)  {  alert("select text differs from inner HTML:\n" + resArModified+"\n"+innerHTMLModified);  }  this.HTMLSelInfo.innerHTML += resAr[1]+","+resAr[2]+"\n";  this.HTMLSelInfo.innerHTML += this.HTMLEditZone.innerHTML;    this.currentSelectionStartPos = resAr[1];  this.currentSelectionEndPos = resAr[2];      for (var a=0; a < this.actions.length; a++)  {  var act = this.actions[a];  if (act.IsEnabledAtPos(this.HTMLEditZone.innerHTML, this.currentSelectionStartPos))  {  if (act.buttonObject)  {   if (act.buttonObject.value.indexOf('/')==-1) act.buttonObject.value = '/'+act.buttonObject.value;  }  }  else  {  if (act.buttonObject)  {   if (act.buttonObject.value.indexOf('/')!=-1) act.buttonObject.value = act.buttonObject.value.substring(1);  }  }  } }  function jEditor_applyActionOnSelectedText(act) {  var resultingText = act.Apply(this.HTMLEditZone.innerHTML, this.currentSelectionStartPos, this.currentSelectionEndPos);  ncReplaceInnerHTML(this.HTMLEditZone, resultingText);  this.computeSelection(); } function jExpression() {    this.HTMLExpression = "";      this.parse = jExpression_parse;  this.getStartToken = jExpression_getStartToken;  this.getEndToken = jExpression_getEndToken; }  function jExpression_parse(expressionNode) {  for (var c=0; c < expressionNode.childNodes.length; c++)  {  var child = expressionNode.childNodes[c];  if (ncNodeTag(child)==null)  continue;   if (ncNodeTag(child)=="html")  {  var dumpWithHtmlTags = ncNodeDump(child);  this.HTMLExpression = dumpWithHtmlTags.substring(6, dumpWithHtmlTags.length-7);  }  else  {  alert("jExpression::parse Expected 'html', got '"+ncNodeTag(child)+"'");  return 0;  }  }  return 1; }  function jExpression_getStartToken() {  var pos = this.HTMLExpression.indexOf('#text');  var startTk = this.HTMLExpression.substring(0, pos);  return startTk; }  function jExpression_getEndToken() {  var pos = this.HTMLExpression.indexOf('#text');  var endTk = this.HTMLExpression.substring(pos+5);  return endTk; }